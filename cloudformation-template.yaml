AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for TaskTrack application infrastructure'

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0fc5d935ebf8bc3bc # Amazon Linux 2023 AMI in us-east-1
    us-east-2:
      AMI: ami-0c20d96b50071cec3 # Amazon Linux 2023 AMI in us-east-2
    us-west-1:
      AMI: ami-0487cee76e7fd86e5 # Amazon Linux 2023 AMI in us-west-1
    us-west-2:
      AMI: ami-0efce26b1845e6d71 # Amazon Linux 2023 AMI in us-west-2
    eu-west-1:
      AMI: ami-0c9110dc5a5e2fd2d # Amazon Linux 2023 AMI in eu-west-1

  EnvironmentMap:
    dev:
      InstanceType: t2.micro
      MultiAZ: false
      BackupRetention: 1
    test:
      InstanceType: t2.small
      MultiAZ: false
      BackupRetention: 3
    prod:
      InstanceType: t2.medium
      MultiAZ: true
      BackupRetention: 7

Conditions:
  IsProduction: !Equals [!Ref Environment, "prod"]
  IsMultiAZDatabase: !Or [!Equals [!Ref Environment, "prod"], !Equals [!Ref MultiAZDatabase, "true"]]
  CreateCloudFrontDistribution: !Equals [!Ref EnableCDN, "true"]

Parameters:
  VpcCIDR:
    Description: CIDR block for the VPC
    Type: String
    Default: 10.0.0.0/16
  
  PublicSubnet1CIDR:
    Description: CIDR block for the public subnet in AZ 1
    Type: String
    Default: 10.0.1.0/24
  
  PublicSubnet2CIDR:
    Description: CIDR block for the public subnet in AZ 2
    Type: String
    Default: 10.0.2.0/24
  
  PrivateSubnet1CIDR:
    Description: CIDR block for the private subnet in AZ 1
    Type: String
    Default: 10.0.3.0/24
  
  PrivateSubnet2CIDR:
    Description: CIDR block for the private subnet in AZ 2
    Type: String
    Default: 10.0.4.0/24
  
  DBUsername:
    Description: Username for RDS database
    Type: String
    Default: postgres
  
  DBPassword:
    Description: Password for RDS database
    Type: String
    NoEcho: true
  
  EC2InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro

  S3BucketName:
    Description: Name for the S3 bucket
    Type: String
    Default: tasktrack-attachments

  Environment:
    Description: Deployment environment
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
  
  MultiAZDatabase:
    Description: Deploy RDS in Multi-AZ configuration
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  
  EnableCDN:
    Description: Deploy CloudFront CDN for frontend
    Type: String
    Default: false
    AllowedValues:
      - true
      - false

Resources:
  # VPC and Networking
  TaskTrackVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: TaskTrack-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: TaskTrack-IGW

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref TaskTrackVPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TaskTrackVPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: TaskTrack-Public-Subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TaskTrackVPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: TaskTrack-Public-Subnet-2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TaskTrackVPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: TaskTrack-Private-Subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TaskTrackVPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: TaskTrack-Private-Subnet-2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TaskTrackVPC
      Tags:
        - Key: Name
          Value: TaskTrack-Public-Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: TaskTrack-NAT-Gateway-1

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TaskTrackVPC
      Tags:
        - Key: Name
          Value: TaskTrack-Private-Routes

  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  # Security Groups
  BackendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for backend EC2 instances
      VpcId: !Ref TaskTrackVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: TaskTrack-Backend-SG

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS instance
      VpcId: !Ref TaskTrackVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref BackendSecurityGroup
      Tags:
        - Key: Name
          Value: TaskTrack-RDS-SG

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      VpcId: !Ref TaskTrackVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: TaskTrack-ALB-SG

  # RDS Database
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: TaskTrack-DB-Subnet-Group

  TaskTrackDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: tasktrack
      Engine: postgres
      EngineVersion: 14.3
      DBInstanceClass: !FindInMap [EnvironmentMap, !Ref Environment, InstanceType]
      AllocatedStorage: 20
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      VPCSecurityGroups:
        - !GetAtt RDSSecurityGroup.GroupId
      DBSubnetGroupName: !Ref DBSubnetGroup
      MultiAZ: !FindInMap [EnvironmentMap, !Ref Environment, MultiAZ]
      PubliclyAccessible: false
      BackupRetentionPeriod: !FindInMap [EnvironmentMap, !Ref Environment, BackupRetention]
      Tags:
        - Key: Name
          Value: TaskTrack-Database

  # S3 Bucket
  TaskTrackBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
            AllowedOrigins:
              - '*'
            MaxAge: 3600
      Tags:
        - Key: Name
          Value: TaskTrack-S3-Bucket

  # IAM Role for EC2
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Path: /
      Tags:
        - Key: Name
          Value: TaskTrack-EC2-Role

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EC2Role

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !GetAtt LoadBalancerSecurityGroup.GroupId
      Tags:
        - Key: Name
          Value: TaskTrack-ALB

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 5000
      Protocol: HTTP
      TargetType: instance
      UnhealthyThresholdCount: 5
      VpcId: !Ref TaskTrackVPC
      Tags:
        - Key: Name
          Value: TaskTrack-Target-Group

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # CloudFront Distribution for Frontend
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Condition: CreateCloudFrontDistribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt ApplicationLoadBalancer.DNSName
            Id: ALBOrigin
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: ALBOrigin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: 
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - POST
            - PATCH
            - DELETE
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: all
            Headers:
              - Authorization
              - Origin
              - Access-Control-Request-Headers
              - Access-Control-Request-Method
        PriceClass: PriceClass_100
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
      Tags:
        - Key: Name
          Value: TaskTrack-CloudFront

  # Auto Scaling Configuration
  BackendLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-backend-template'
      LaunchTemplateData:
        ImageId: !FindInMap [RegionMap, !Ref AWS::Region, AMI]
        InstanceType: !FindInMap [EnvironmentMap, !Ref Environment, InstanceType]
        SecurityGroupIds:
          - !GetAtt BackendSecurityGroup.GroupId
        IamInstanceProfile:
          Name: !Ref EC2InstanceProfile
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            # Update instance and install required software
            yum update -y
            yum install -y aws-cli jq
            amazon-linux-extras install docker -y
            service docker start
            usermod -a -G docker ec2-user
            systemctl enable docker
            
            # Install CloudWatch agent
            yum install -y amazon-cloudwatch-agent
            
            # Configure CloudWatch agent
            cat > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json << EOL
            {
              "logs": {
                "logs_collected": {
                  "files": {
                    "collect_list": [
                      {
                        "file_path": "/var/log/tasktrack-init.log",
                        "log_group_name": "${TaskTrackLogGroup}",
                        "log_stream_name": "{instance_id}/init",
                        "timezone": "UTC"
                      },
                      {
                        "file_path": "/var/log/docker",
                        "log_group_name": "${TaskTrackLogGroup}",
                        "log_stream_name": "{instance_id}/docker",
                        "timezone": "UTC"
                      }
                    ]
                  }
                }
              },
              "metrics": {
                "metrics_collected": {
                  "mem": {
                    "measurement": ["mem_used_percent"]
                  },
                  "disk": {
                    "measurement": ["disk_used_percent"],
                    "resources": ["/"]
                  }
                }
              }
            }
            EOL
            
            # Start CloudWatch agent
            systemctl enable amazon-cloudwatch-agent
            systemctl start amazon-cloudwatch-agent
            
            # Install Git and clone repository
            yum install -y git
            git clone https://github.com/your-username/tasktrack.git /home/ec2-user/tasktrack
            
            # Set log file
            LOG_FILE="/var/log/tasktrack-init.log"
            touch $LOG_FILE
            chmod 664 $LOG_FILE
            
            echo "Starting TaskTrack backend setup at $(date)" >> $LOG_FILE
            
            # Configure environment variables
            mkdir -p /home/ec2-user/tasktrack/backend
            cat > /home/ec2-user/tasktrack/backend/.env << EOL
            PORT=5000
            NODE_ENV=${Environment}
            
            DB_DIALECT=postgres
            DB_HOST=${TaskTrackDatabase.Endpoint.Address}
            DB_PORT=5432
            DB_NAME=tasktrack
            DB_USER=${DBUsername}
            DB_PASSWORD=${DBPassword}
            
            JWT_SECRET=$(openssl rand -hex 32)
            
            AWS_REGION=${AWS::Region}
            AWS_S3_BUCKET_NAME=${TaskTrackBucket}
            EOL
            
            # Build and run Docker container
            cd /home/ec2-user/tasktrack/backend
            
            # Retry mechanism for Docker build
            MAX_ATTEMPTS=3
            ATTEMPT=1
            
            echo "Starting Docker build at $(date)" >> $LOG_FILE
            
            until docker build -t tasktrack-backend . >> $LOG_FILE 2>&1 || [ $ATTEMPT -eq $MAX_ATTEMPTS ]; do
              echo "Docker build attempt $ATTEMPT failed, retrying in 10 seconds..." >> $LOG_FILE
              ATTEMPT=$((ATTEMPT+1))
              sleep 10
            done
            
            if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
              echo "Failed to build Docker image after $MAX_ATTEMPTS attempts" >> $LOG_FILE
              /opt/aws/bin/cfn-signal -e 1 --resource BackendAutoScalingGroup --region ${AWS::Region}
              exit 1
            fi
            
            echo "Docker build successful, running container at $(date)" >> $LOG_FILE
            
            # Run the container
            docker run -d -p 5000:5000 --restart always --env-file .env --name tasktrack-api tasktrack-backend >> $LOG_FILE 2>&1
            
            echo "Setup completed successfully at $(date)" >> $LOG_FILE
            
            # Signal success
            /opt/aws/bin/cfn-signal -e $? --resource BackendAutoScalingGroup --region ${AWS::Region}
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: TaskTrack-Backend-ASG

  BackendAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: TaskTrackDatabase
    Properties:
      AutoScalingGroupName: !Sub '${AWS::StackName}-backend-asg'
      MinSize: !If [IsProduction, 2, 1]
      MaxSize: !If [IsProduction, 6, 2]
      DesiredCapacity: !If [IsProduction, 2, 1]
      LaunchTemplate:
        LaunchTemplateId: !Ref BackendLaunchTemplate
        Version: !GetAtt BackendLaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      TargetGroupARNs:
        - !Ref TargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: TaskTrack-Backend-ASG
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: !If [IsProduction, 2, 1]
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: !If [IsProduction, 1, 0]
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true

  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref BackendAutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 70.0

  # CloudWatch Alarms for Monitoring
  HighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm if CPU exceeds 80% for 5 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      AlarmActions:
        - !Ref ScaleUpPolicy
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref BackendAutoScalingGroup

  DatabaseCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm if database CPU exceeds 80% for 5 minutes
      MetricName: CPUUtilization
      Namespace: AWS/RDS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: DBInstanceIdentifier
          Value: !Ref TaskTrackDatabase

  # CloudWatch Log Groups
  TaskTrackLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/ec2/${AWS::StackName}-backend'
      RetentionInDays: !If [IsProduction, 30, 7]
      Tags:
        - Key: Name
          Value: TaskTrack-Logs

Outputs:
  VPCID:
    Description: VPC ID
    Value: !Ref TaskTrackVPC

  PublicSubnets:
    Description: Public subnets
    Value: !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2]]

  PrivateSubnets:
    Description: Private subnets
    Value: !Join [",", [!Ref PrivateSubnet1, !Ref PrivateSubnet2]]

  RDSEndpoint:
    Description: RDS connection endpoint
    Value: !GetAtt TaskTrackDatabase.Endpoint.Address

  BackendURL:
    Description: URL of the Backend API
    Value: !Join ["", ["http://", !GetAtt ApplicationLoadBalancer.DNSName]]

  S3BucketName:
    Description: S3 Bucket for file attachments
    Value: !Ref TaskTrackBucket
    
  CloudFrontURL:
    Description: CloudFront Distribution URL (if enabled)
    Condition: CreateCloudFrontDistribution
    Value: !Join ["", ["https://", !GetAtt CloudFrontDistribution.DomainName]]
    
  DeployEnvironment:
    Description: Current deployment environment
    Value: !Ref Environment
    
  DBConnectionString:
    Description: Database connection string (without password)
    Value: !Sub "postgres://${DBUsername}@${TaskTrackDatabase.Endpoint.Address}:5432/tasktrack"
    
  AutoScalingGroupName:
    Description: Auto Scaling Group name for backend instances
    Value: !Ref BackendAutoScalingGroup 